---
description: Use these rules when writing or updating tests
globs: 
alwaysApply: false
---
# Testing Rules

## General

- Use the `flutter test` command to run tests
- Use direct class references for group descriptions (e.g., `group(MyClass, () {...})`).
- For provider instances or other objects (e.g., `usernameProvider`), use quoted strings instead (e.g., `group('usernameProvider', () {...})`), as they would otherwise display as "Instance of [...]" in test output.
- ALWAYS write helper methods for pumping the widget under test or reading/listening to providers
- Avoid structural or obvious comments like "Arrange, Act, Assert", "verify xyz"

## Mocking

We're using the `mockito` package for mocking.

### Creating mocks

1. Look at the `mocks.dart` file if the class already has a mock
   1. If yes, use it
   2. If no, add it and run the dart build runner to generate it

If the file does not exist, yet, create it and follow this structure:

```dart

@GenerateMocks([
  SomeClass,
])
class GeneratedMocks {}

```

Avoid adding the mocks to the respective test files. ONLY add them to the `mocks.dart` file.

### Using mocks

Follow this outline to use mocks:

```dart
void main() {
  late MockRestClient client;

  setUp(() {
    client = MockRestClient();

    when(client.someMethod('someParameter')).thenAnswer((_) => 'some result');
  });
}
```

## Overriding Riverpod Providers

Use the following convention for overriding the different providers. All examples apply to the `overrides` in `ProviderScope`, as well as `ProviderContainer`:

### Value Providers

```dart
overrides: [
  someValueProvider.overrideWithValue(someValue),
],
```

### Future Providers

Use the Builder pattern to create a value so we can test data, loading and error states of the provider.
The Builder's signature is `FutureOr<ReturnTypeProvider> Function(FutureProviderRef<ReturnTypeOfProvider>)`.

```dart
overrides: [
  someFutureProvider.overrideWith(valueBuilder),
],
```

Examples:  
  
Complete with value:

```dart
FutureOr<String> usernameBuilder(FutureProviderRef<String> ref) => 'username';
// ...
overrides: [
  usernameProvider.overrideWith(usernameBuilder),
],
/// ...
```

Complete with error:

```dart
final error = Exception();
FutureOr<String> usernameBuilder(FutureProviderRef<String> ref) => throw error;
// ...
overrides: [
  usernameProvider.overrideWith(usernameBuilder),
],
/// expect `error` to be thrown
```

Do not complete:

```dart
FutureOr<String> usernameBuilder(FutureProviderRef<String> ref) => Completer<String>().future;
// ...
overrides: [
  usernameProvider.overrideWith(usernameBuilder),
],
/// ...
```

### Notifier Providers

For notifier providers we need to use fakes. If the respective fake doesn't exist yet, please create one.
Given the following notifier provider:

```dart
@riverpod
class UsernameController extends _$UsernameController {
  @override
  Future<String> build() async {
    // fetch `username` from backend
    return username;
  }

  Future<void> updateUsername(String username) {
    // update `usernameËš in backend
    state = AsyncData(username);
  }
}
```

We create this fake:

```dart
class FakeUsernameController extends UsernameController {
  FakeUsernameController({
    required this.username,
    this.behavior,
  });

  String username;
  FutureBehavior? behavior;

  final List<String> usernameUpdates = [];

  @override
  Future<String> build() async {
    behavior?.simulate();
    return username;
  }

  @override
  Future<void> updateUsername(String username) {
    usernameUpdates.add(username);
  }

  void updateMock({
    String? username,
    FutureBehavior? behavior,
  }) {
    if (username != null) {
      this.username = username;
    }
    this.behavior = behavior;
  }
}
```

Examples:  
With a value:

```dart
overrides: [
  usernameControllerProvider.overrideWith(
    () => FakeUsernameController(
      username: 'username',
    ),
  ),
];
```

With an error:

```dart
final error = Exception();
// ...
overrides: [
  usernameControllerProvider.overrideWith(
    () => FakeUsernameController(
      username: 'username',
      behavior: FutureBehavior(
        error: error,
      )
    ),
  ),
];
// ...
// expect `error` to be thrown
```

With a delay:

```dart
overrides: [
  usernameControllerProvider.overrideWith(
    () => FakeUsernameController(
      username: 'username',
      behavior: FutureBehavior(
        delay: Future<void>.delayed(Duration(seconds: 1)),
      )
    ),
  ),
];
```

Not completing = infinitely in loading state:

```dart
overrides: [
  usernameControllerProvider.overrideWith(
    () => FakeUsernameController(
      username: 'username',
      behavior: FutureBehavior(
        loading: true,
      )
    ),
  ),
];
```

### Testing Riverpod family providers

Family providers are tested similarly to other providers. But instead of `container.read(provider)` we have to do `container.read(provider(parameter))`.
For overriding, we do `provider(parameter).overrideWith(...)`. The same goes for `container.listen`.

## Unit Tests

### Testing Riverpod value providers

Create a helper method that reads and returns the value of the provider.  
Example:

```dart
String getUsername({required User user}) {
  final container = ProviderContainer(
    overrides: [
      userProvider.overrideWithValue(user),
    ],
  );
  addTearDown(container.dispose);
  return container.read(usernameProvider);
}

test('some test', () {
  final username = getUsername(user: User());
  expect(username, 'username');
});
```

### Testing Riverpod future providers

Create a helper method that reads and returns the value of the provider.  
Example:

```dart
Future<String> getUsername({required User user}) async {
  final container = ProviderContainer(
    overrides: [
      userProvider.overrideWithValue(user),
    ],
  );
  addTearDown(container.dispose);
  return container.read(usernameFutureProvider.future);
}

test('some test', () async {
  final username = await getUsername(user: User());
  expect(username, 'username');
});
```

### Testing Riverpod notifier providers

Create a helper method that reads and returns a subscription on the provider.  
Example:

```dart
ProviderSubscription<UsernameController> listenToController({required User user}) {
  final container = ProviderContainer(
    overrides: [
      userProvider.overrideWithValue(user),
    ],
  );
  addTearDown(container.dispose);
  return container.listen(usernameFutureProvider.notifier, (_, __) {});
}

test('some test', () {
  final subscription = listenToController(user: User());
  expect(subscription.read().state.username, 'username');
  fakeAsync((async) {
    subscription.read().updateUsername('updated username');
    async.flushMicrotasks();
    expect(subscription.read().state.username, 'updated username');
  });
});
```

## Widget Tests

### Helper method

Create a helper method to pump the test widget. Pass any parameters needed for testing to it as named parameters.  
Example:

```dart
Future<void> createTestWidget(
  WidgetTester tester, {
  required String name,
  }) async {
  await tester.pumpWidget(
    WidgetUnderTest(
      name: name,
    ),
  );
}
```

### Getting the context

```dart
final context = tester.element(find.byType(WidgetUnderTest));
```

### Riverpod provider overrides

To override providers, use the `createTestWidget` method and pass any required parameters to it.  
Example:

```dart
Future<void> createTestWidget(
  WidgetTester tester, {
  required String username,
  }) async {
  await tester.pumpWidget(
    ProviderScope(
      overrides: [
        userNameProvider.overrideWithValue(username),
      ],
      child: WidgetUnderTest(
        name: username,
      ),
    )
  );
}
```

### Accessing Riverpod providers

Use the following to get a provider within a test, for example to check on its state value

```dart
final container = ProviderScope.containerOf(context);
final username = container.read(usernameProvider);
```

### Accessing Riverpod notifiers

Use the following to get a notifier within a test, for example to call a method on it

```dart
final container = ProviderScope.containerOf(context);
await container.read(usernameProvider.notifier).updateUsername('Updated Username');
```

## Using ValueVariants

ValueVariants allow you to run the same test multiple times with different input values, which enables more thorough testing with less code duplication.

### Simple ValueVariants

Simple variants use a basic type like `bool`, `int`, or `String` and are useful for testing behavior across different conditions:

```dart
final ValueVariant<bool> isDarkModeVariant = 
    ValueVariant<bool>(<bool>{true, false});

testWidgets(
  'ColoredBox changes color based on theme mode',
  variant: isDarkModeVariant,
  (final WidgetTester tester) async {
    final bool isDarkMode = isDarkModeVariant.currentValue!;
    
    await tester.pumpWidget(
      MaterialApp(
        theme: ThemeData(brightness: isDarkMode ? Brightness.dark : Brightness.light),
        home: const ThemedColoredBox(),
      ),
    );

    final ColoredBox coloredBox = tester.widget(find.byType(ColoredBox));
    
    expect(
      coloredBox.color,
      isDarkMode ? Colors.grey[800] : Colors.white,
    );
  },
);
```

### Complex ValueVariants

For more complex test cases, create a custom class that extends `ValueVariant<T>` with a custom type.
IMPORTANT: The custom class should be at the END of the file.

1. First, define a type that captures all test parameters:

```dart
typedef ButtonVariantSignature = ({
  String label,
  Color color,
  bool isEnabled,
});
```

2. Create your custom variant class:

```dart
class ButtonVariant extends ValueVariant<ButtonVariantSignature> {
  ButtonVariant()
      : super(<ButtonVariantSignature>{
          (
            label: 'Primary Button',
            color: Colors.blue,
            isEnabled: true,
          ),
          (
            label: 'Disabled Button',
            color: Colors.blue,
            isEnabled: false,
          ),
          (
            label: 'Danger Button',
            color: Colors.red,
            isEnabled: true,
          ),
        });

  @override
  String describeValue(final ButtonVariantSignature value) {
    return '${value.label} (${value.isEnabled ? 'enabled' : 'disabled'})';
  }
}
```

3. Use the complex variant in your test:

```dart
final ButtonVariant buttonVariant = ButtonVariant();

testWidgets(
  'CustomButton renders correctly with different configurations',
  variant: buttonVariant,
  (final WidgetTester tester) async {
    final ButtonVariantSignature config = buttonVariant.currentValue!;
    
    await tester.pumpWidget(
      MaterialApp(
        home: Scaffold(
          body: CustomButton(
            label: config.label,
            color: config.color,
            isEnabled: config.isEnabled,
            onPressed: config.isEnabled ? () {} : null,
          ),
        ),
      ),
    );
    
    // Find the button text
    expect(find.text(config.label), findsOneWidget);
    
    // Check if the button is enabled/disabled
    final ElevatedButton button = tester.widget(find.byType(ElevatedButton));
    expect(button.onPressed != null, equals(config.isEnabled));
    
    // Verify the button color
    final Material material = tester.widget<Material>(
      find.descendant(
        of: find.byType(ElevatedButton),
        matching: find.byType(Material),
      ),
    );
    expect(material.color, equals(config.color));
  },
);
```

IMPORTANT: The variant needs to be instantiated OUTSIDE of the test method and only its reference may be passed to the `variant` parameter and referenced inside the test.

### Benefits of ValueVariants

- Reduce code duplication by running the same test logic with different values
- Get better test output with descriptive variant names
- Ensure consistent test coverage across multiple conditions
- Make edge case testing more thorough and systematic
